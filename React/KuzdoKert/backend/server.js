const express = require("express");
const mysql = require("mysql2");
const cors = require("cors");
const bcrypt = require("bcrypt");
const saltRounds = 10
require("dotenv").config();
const jwt = require("jsonwebtoken");

const bodyParser = require('body-parser')
const cookieParser = require('cookie-parser')
const session = require('express-session')

const app = express();


app.use(express.json());
app.use(cors({
  origin: ["http://localhost:5173"],
  methods: ["GET","POST"],
  credentials: true
}));

app.use(cookieParser())
app.use(bodyParser.urlencoded({extended: true}))

app.use(session({
  key: "userId",
  secret: "secret",
  resave: false,
  saveUninitialized: false,
  cookie:{
    expires: 1000000
  },
}))

//--------------------------------------------------------

// **MySQL adatbÃ¡zis kapcsolat**
const db = mysql.createConnection({
  host: "localhost",
  user: "root", // MySQL felhasznÃ¡lÃ³nÃ©v
  password: "", // MySQL jelszÃ³ (ha van)
  port: "3306",
  database: "kuzdosportok",
});

db.connect((err) => {
  if (err) {
    console.error("ðŸ”´ MySQL hiba:", err);
  } else {
    console.log("âœ… MySQL kapcsolÃ³dva!");
  }
});

//----------------------------------------------------

  // RegisztrÃ¡ciÃ³
  app.post('/register', (req, res) => {
    const vnev = req.body.vnev;
    const knev = req.body.knev;
    const knev2 = req.body.knev2;
    const email = req.body.email;
    const szul = req.body.szul;
    const lakhely = req.body.lakhely;
    const tel = req.body.tel;
    const felhasznalonev = req.body.username;
    const jelszo = req.body.password;
    const role = req.body.role || "visitor"; // AlapÃ©rtelmezett: lÃ¡togatÃ³
  
    bcrypt.hash(jelszo, saltRounds, (err, hash) => {
      if (err) {
        console.log(err);
        return res.status(500).send("Hiba a jelszÃ³ hash-elÃ©se kÃ¶zben.");
      }
  
      db.query(
        "INSERT INTO latogatok (vnev, knev, knev2, lakhelyvaros, email, telefonszam, szul_ido, felhasznalonev, jelszo, role, regisztracio_datum) VALUES (?,?,?,?,?,?,?,?,?,?, NOW())",
        [vnev, knev, knev2, lakhely, email, tel, szul, felhasznalonev, hash, role],
        (err, result) => {
          if (err) {
            console.log("HibÃ¡k:" + err);
            return res.status(500).send("Hiba a regisztrÃ¡ciÃ³ sorÃ¡n.");
          }
          console.log("Az insert (regisztrÃ¡ciÃ³) sikeresen lefutott.");
          res.send({ message: "Sikeres regisztrÃ¡ciÃ³!" });
        }
      );
    });
  });
//----------------------------------------------------------------

//felhasznÃ¡lÃ³nÃ©v check

app.post("/checkUsername", (req, res) => {
  const felhasznalonev = req.body.username;

  db.query(
    "SELECT felhasznalonev FROM kuzdosportok.latogatok WHERE felhasznalonev = ?",
    [felhasznalonev],
    (err, result) => {
      if (err) {
        res.status(500).send({ error: "Database error" });
      } else {
        console.log("SQL result:", result); // EllenÅ‘rizd a szerveren
        res.send({ exists: result.length > 0 });
      }
    }
  );
});


//-----------------------------------------------------------------------------------


  //login check (be vagy e jelentkezve)

  app.get("/login", (req, res) => {
    if (req.session.user) {
      res.send({loggedIn: true, user: req.session.user})
    }
    else{
      res.send({loggedIn: false, user: null})
    }
  })

//bejelentkezÃ©s
  app.post('/login', (req, res) => {
    const felhasznalonev = req.body.username;
    const jelszo = req.body.password;
  
    db.query(
      "SELECT * FROM latogatok WHERE felhasznalonev = ?",
      [felhasznalonev],
      (err, result) => {
        if (err) {
          res.send({ err: err });
        }
  
        if (result.length > 0) {
          bcrypt.compare(jelszo, result[0].jelszo, (error, response) => {
            if (response) {
              req.session.user = result;
              console.log(req.session.user);
              res.send(result); // A result tartalmazza a vnev, knev, role stb. Ã©rtÃ©keket

              db.query(
                "INSERT INTO latogatobejelentkezesek (user_id, bejelentkezes_ido) VALUES (?, NOW())",
                [req.session.user[0].user_id],
                (err,) => {
                  if (err) {
                    console.log("HibÃ¡k:" + err);
                    return res.status(500).send("Hiba a beszÃºrÃ¡s sorÃ¡n");
                  }
                  console.log("Az insert sikeresen lefutott.");
                }
              );

            } else {
              res.send({ message: "Rossz felhasznÃ¡lÃ³/jelszÃ³ kombinÃ¡ciÃ³!" });
            }
          });
        } else {
          res.send({ message: "Nem lÃ©tezÅ‘ felhasznÃ¡lÃ³!" });
        }
      }
    );
  });

//-----------------------------------------------------------------------------


//kijelentkezÃ©s
app.post("/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error("Hiba a kijelentkezÃ©s sorÃ¡n:", err);
      return res.status(500).json({ error: "Nem sikerÃ¼lt kijelentkezni" });
    }
    
    res.clearCookie("userId");
    res.json({ loggedIn: false, user: null, message: "Sikeres kijelentkezÃ©s!" });
    
  });
});

//-------------------------------------------------------


//felhasznÃ¡lÃ³i adat frissÃ­tÃ©s
app.post("/updateUser", (req, res) => {
  const { vnev, knev, knev2, email, szul, lakhely, tel, username, password } = req.body;
  
  const sql = `
    UPDATE latogatok 
    SET vnev = ?, knev = ?, knev2 = ?, email = ?, szul_ido = ?, lakhelyvaros = ?, telefonszam = ?, jelszo = ?
    WHERE felhasznalonev = ?;
  `;

  db.query(sql, [vnev, knev, knev2, email, szul, lakhely, tel, password, username], (err, result) => {
    if (err) {
      console.error("Hiba az adatbÃ¡zis frissÃ­tÃ©sekor:", err);
      return res.status(500).send("Hiba tÃ¶rtÃ©nt az adatok frissÃ­tÃ©se kÃ¶zben."); // ðŸ”¹ FONTOS: return, hogy ne fusson tovÃ¡bb!
    }

    console.log("âœ… Profil sikeresen frissÃ­tve!");

    // **SÃ¼ti tÃ¶rlÃ©se Ã©s Ãºjra lÃ©trehozÃ¡sa**
    res.clearCookie("userId");
    res.cookie("userId", username, {
      maxAge: 1000000
    });


    req.session.user = [{
      vnev, knev, knev2, email, szul_ido: szul, lakhelyvaros: lakhely, telefonszam: tel, felhasznalonev: username, jelszo: password
    }];


    res.send({ message: "Profil sikeresen frissÃ­tve!", user: req.session.user });

    
  });
});

//jelszÃ³ mÃ©g nem fix h mÅ±kÃ¶dik
//--------------------------------------------------------------------------------------



//sportok lekÃ©rÃ©se
app.get("/sports/:id", (req, res) => {
  const sportId = req.params.id;

  const sql = "SELECT sport_id, sportnev, leiras, szabalyok FROM kuzdosportok.sport WHERE sport_id = ?";

  db.query(sql, [sportId], (err, results) => {
    if (err) {
      console.error("Hiba az adatlekÃ©rdezÃ©s sorÃ¡n:", err);
      return res.status(500).json({ error: "AdatbÃ¡zis hiba" });
    }

    if (results.length > 0) {
      res.json(results[0]);
    } else {
      res.status(404).json({ error: "Nincs ilyen sport" });
    }
  });
});


//----------------------------------------------------------------------------------------

//klubbok lekÃ©rÃ©se
app.get("/klubbok/:sportId", (req, res) => {
  const sportId = req.params.sportId;
  const query = `SELECT * FROM klubbok WHERE sport_id = ?`;

  db.query(query, [sportId], (err, results) => {
    if (err) {
      console.error("Hiba tÃ¶rtÃ©nt:", err);
      res.status(500).json({ error: "AdatbÃ¡zis hiba" });
    } else {
      res.json(results);
    }
  });
});
//-----------------------------------------------------------------------------------------------


//JelszÃ³vÃ¡ltoztatÃ¡s
app.post("/changePassword", (req, res) => {
  const { username, oldPassword, newPassword } = req.body;

  if (newPassword.length < 6) {
    return res.status(400).json({ message: "Az Ãºj jelszÃ³nak legalÃ¡bb 6 karakter hosszÃºnak kell lennie!" });
  }

  const query = "SELECT jelszo FROM latogatok WHERE felhasznalonev = ?";
  db.query(query, [username], (err, result) => {
    if (err) {
      return res.status(500).json({ message: "Hiba tÃ¶rtÃ©nt az adatbÃ¡zisban." });
    }
    if (result.length === 0) {
      return res.status(404).json({ message: "FelhasznÃ¡lÃ³ nem talÃ¡lhatÃ³." });
    }

    const hashedPassword = result[0].jelszo;

    // EllenÅ‘rizzÃ¼k a rÃ©gi jelszÃ³t
    bcrypt.compare(oldPassword, hashedPassword, (err, match) => {
      if (err) {
        return res.status(500).json({ message: "Hiba tÃ¶rtÃ©nt az ellenÅ‘rzÃ©s sorÃ¡n." });
      }
      if (!match) {
        return res.status(400).json({ message: "A rÃ©gi jelszÃ³ helytelen!" });
      }

      // EllenÅ‘rizzÃ¼k, hogy az Ãºj jelszÃ³ nem egyezik-e a jelenlegi hash-elt jelszÃ³val
      bcrypt.compare(newPassword, hashedPassword, (err, same) => {
        if (err) {
          return res.status(500).json({ message: "Hiba tÃ¶rtÃ©nt az ellenÅ‘rzÃ©s sorÃ¡n." });
        }
        if (same) {
          return res.status(400).json({ message: "Az Ãºj jelszÃ³ nem lehet ugyanaz, mint a rÃ©gi!" });
        }

        // Ha minden rendben van, akkor hash-eljÃ¼k az Ãºj jelszÃ³t
        bcrypt.hash(newPassword, 10, (err, newHashedPassword) => {
          if (err) {
            return res.status(500).json({ message: "Hiba tÃ¶rtÃ©nt a jelszÃ³ hash-elÃ©sekor." });
          }

          const updateQuery = "UPDATE latogatok SET jelszo = ? WHERE felhasznalonev = ?";
          db.query(updateQuery, [newHashedPassword, username], (err, result) => {
            if (err) {
              return res.status(500).json({ message: "Hiba tÃ¶rtÃ©nt a jelszÃ³ frissÃ­tÃ©sekor." });
            }
            res.json({ message: "JelszÃ³ sikeresen megvÃ¡ltoztatva!" });
          });
        });
      });
    });
  });
});



//----------------------------------------------------------------------------------------------

// EdzÃ©s hozzÃ¡adÃ¡sa az edzÅ‘ Ã¡ltal
app.post("/coach/add-workout", (req, res) => {
  const { user_id, sport_id, hely, idonap, ido, leiras, vnev, knev, klubbnev } = req.body;

  console.log("KÃ¼ldÃ¶tt adatok:", { user_id, sport_id, hely, idonap, ido, leiras, vnev, knev, klubbnev });

  // EllenÅ‘rizzÃ¼k, hogy minden szÃ¼ksÃ©ges mezÅ‘ meg van adva
  if (!user_id || !sport_id || !hely || !idonap || !ido) {
    return res.status(400).json({ error: "Minden kÃ¶telezÅ‘ mezÅ‘t ki kell tÃ¶lteni!" });
  }

  // EllenÅ‘rizzÃ¼k, hogy sport_id Ã©s user_id szÃ¡mok
  if (isNaN(user_id) || isNaN(sport_id)) {
    return res.status(400).json({ error: "A user_id Ã©s sport_id szÃ¡mnak kell lennie!" });
  }

  // EllenÅ‘rizzÃ¼k, hogy a user_id lÃ©tezik-e a latogatok tÃ¡blÃ¡ban
  db.query("SELECT user_id FROM latogatok WHERE user_id = ?", [user_id], (err, userResult) => {
    if (err) {
      console.error("Hiba a felhasznÃ¡lÃ³ ellenÅ‘rzÃ©sekor:", err.message);
      return res.status(500).json({ error: "AdatbÃ¡zis hiba", details: err.message });
    }
    if (userResult.length === 0) {
      return res.status(400).json({ error: "A felhasznÃ¡lÃ³ nem lÃ©tezik!" });
    }

    // EllenÅ‘rizzÃ¼k, hogy a sport_id lÃ©tezik-e a sport tÃ¡blÃ¡ban
    db.query("SELECT sport_id FROM sport WHERE sport_id = ?", [sport_id], (err, sportResult) => {
      if (err) {
        console.error("Hiba a sport ellenÅ‘rzÃ©sekor:", err.message);
        return res.status(500).json({ error: "AdatbÃ¡zis hiba", details: err.message });
      }
      if (sportResult.length === 0) {
        return res.status(400).json({ error: "A sport nem lÃ©tezik!" });
      }

      const sql = `
        INSERT INTO klubbok (sport_id, user_id, vnev, knev, klubbnev, hely, idonap, ido, leiras, szabalyok)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)
      `;

      db.query(sql, [sport_id, user_id, vnev, knev, klubbnev, hely, idonap, ido, leiras], (err, result) => {
        if (err) {
          console.error("Hiba az edzÃ©s hozzÃ¡adÃ¡sakor:", err.message);
          if (err.code === 'ER_DUP_ENTRY') {
            return res.status(500).json({ error: "DuplikÃ¡lt bejegyzÃ©s", details: err.message });
          }
          return res.status(500).json({ error: "AdatbÃ¡zis hiba", details: err.message });
        }

        // Az Ãºjonnan hozzÃ¡adott edzÃ©s lekÃ©rdezÃ©se (visszakÃ¼ldÃ©shez)
        db.query(
          "SELECT * FROM klubbok WHERE sprotklub_id = LAST_INSERT_ID()",
          (err, newWorkout) => {
            if (err) {
              console.error("Hiba az Ãºj edzÃ©s lekÃ©rdezÃ©sekor:", err.message);
              return res.status(500).json({ error: "AdatbÃ¡zis hiba", details: err.message });
            }
            res.json({ message: "EdzÃ©s sikeresen hozzÃ¡adva!", workout: newWorkout[0] });
          }
        );
      });
    });
  });
});

app.get('/ertekelesek/:sportklub_id', (req, res) => {
  const sportklub_id = req.params.sportklub_id;
  const query = `
    SELECT e.*, l.felhasznalonev 
    FROM ertekelesek e 
    JOIN latogatok l ON e.user_id = l.user_id 
    WHERE e.sportklub_id = ?
  `;
  
  db.query(query, [sportklub_id], (err, results) => {
    if (err) {
      console.error('Hiba az Ã©rtÃ©kelÃ©sek lekÃ©rÃ©sekor:', err);
      return res.status(500).json({ message: 'Hiba tÃ¶rtÃ©nt az Ã©rtÃ©kelÃ©sek lekÃ©rÃ©sekor.' });
    }
    res.json(results);
  });
});

// Ãšj Ã©rtÃ©kelÃ©s hozzÃ¡adÃ¡sa
app.post('/ertekelesek', (req, res) => {
  const { user_id, sportklub_id, szoveges_ertekeles, csillagos_ertekeles } = req.body;

  // EllenÅ‘rizzÃ¼k, hogy a felhasznÃ¡lÃ³ lÃ©tezik-e Ã©s visitor szerepkÃ¶re van-e
  const checkUserQuery = `SELECT role FROM latogatok WHERE user_id = ?`;
  db.query(checkUserQuery, [user_id], (err, results) => {
    if (err) {
      console.error('Hiba a felhasznÃ¡lÃ³ ellenÅ‘rzÃ©sekor:', err);
      return res.status(500).json({ message: 'Hiba tÃ¶rtÃ©nt a felhasznÃ¡lÃ³ ellenÅ‘rzÃ©sekor.' });
    }

    if (results.length === 0) {
      return res.status(404).json({ message: 'FelhasznÃ¡lÃ³ nem talÃ¡lhatÃ³.' });
    }

    const userRole = results[0].role;
    if (userRole !== 'visitor') {
      return res.status(403).json({ message: 'Csak lÃ¡togatÃ³k adhatnak Ã©rtÃ©kelÃ©st!' });
    }

    // Ã‰rtÃ©kelÃ©s beszÃºrÃ¡sa
    const insertQuery = `
      INSERT INTO ertekelesek (user_id, sportklub_id, szoveges_ertekeles, csillagos_ertekeles)
      VALUES (?, ?, ?, ?)
    `;
    db.query(insertQuery, [user_id, sportklub_id, szoveges_ertekeles, csillagos_ertekeles], (err, result) => {
      if (err) {
        console.error('Hiba az Ã©rtÃ©kelÃ©s hozzÃ¡adÃ¡sakor:', err);
        return res.status(500).json({ message: 'Hiba tÃ¶rtÃ©nt az Ã©rtÃ©kelÃ©s hozzÃ¡adÃ¡sa sorÃ¡n.' });
      }
      res.json({ message: 'Ã‰rtÃ©kelÃ©s sikeresen hozzÃ¡adva!' });
    });
  });
});



// JelentkezÃ©s hozzÃ¡adÃ¡sa (ha mÃ©g nincs ilyen endpoint)
app.post('/apply-workout', (req, res) => {
  const { user_id, sportklub_id } = req.body;

  const query = `
    INSERT INTO jelentkezes (user_id, sportkulb_id, jelentkezes_ido, elfogadasi_ido, elfogadva)
    VALUES (?, ?, NOW(), NOW(), 1)
  `;

  db.query(query, [user_id, sportklub_id], (err, result) => {
    if (err) {
      console.error('Hiba a jelentkezÃ©s hozzÃ¡adÃ¡sakor:', err);
      return res.status(500).json({ message: 'Hiba tÃ¶rtÃ©nt a jelentkezÃ©s sorÃ¡n.' });
    }
    res.json({ message: 'Sikeres jelentkezÃ©s!' });
  });
});

// EdzÅ‘k Ã©rtesÃ­tÃ©sei a jelentkezÃ©sekrÅ‘l
app.get('/coach-notifications/:user_id', (req, res) => {
  const user_id = req.params.user_id;

  const query = `
    SELECT 
      j.jelentkezes_id,
      l.felhasznalonev AS visitor_username,
      k.klubbnev,
      k.hely,
      k.idonap,
      k.ido,
      j.jelentkezes_ido
    FROM jelentkezes j
    JOIN latogatok l ON j.user_id = l.user_id
    JOIN klubbok k ON j.sportkulb_id = k.sprotklub_id
    WHERE k.user_id = ?
      AND j.elfogadva = 1
    ORDER BY j.jelentkezes_ido DESC
    LIMIT 10
  `;

  db.query(query, [user_id], (err, results) => {
    if (err) {
      console.error('Hiba az edzÅ‘i Ã©rtesÃ­tÃ©sek lekÃ©rdezÃ©sekor:', err);
      return res.status(500).json({ message: 'Hiba tÃ¶rtÃ©nt az Ã©rtesÃ­tÃ©sek lekÃ©rdezÃ©sekor.' });
    }
    res.json(results);
  });
});

// Ã‰rtesÃ­tÃ©sek lekÃ©rdezÃ©se a lÃ¡togatÃ³ szÃ¡mÃ¡ra
app.get('/notifications/:user_id', (req, res) => {
  const user_id = req.params.user_id;

  const query = `
    SELECT 
      j.jelentkezes_id,
      k.klubbnev,
      k.hely,
      k.idonap,
      k.ido,
      l.vnev AS coach_vnev,
      l.knev AS coach_knev
    FROM jelentkezes j
    JOIN klubbok k ON j.sportkulb_id = k.sprotklub_id
    JOIN latogatok l ON k.user_id = l.user_id
    WHERE j.user_id = ?
      AND k.idonap = DAYNAME(CURDATE())
      AND j.elfogadva = 1
  `;

  db.query(query, [user_id], (err, results) => {
    if (err) {
      console.error('Hiba az Ã©rtesÃ­tÃ©sek lekÃ©rdezÃ©sekor:', err);
      return res.status(500).json({ message: 'Hiba tÃ¶rtÃ©nt az Ã©rtesÃ­tÃ©sek lekÃ©rdezÃ©sekor.' });
    }
    res.json(results);
  });
});

// JelentkezÃ©s hozzÃ¡adÃ¡sa (ha mÃ©g nincs ilyen endpoint)
app.post('/apply-workout', (req, res) => {
  const { user_id, sportklub_id } = req.body;

  const query = `
    INSERT INTO jelentkezes (user_id, sportkulb_id, jelentkezes_ido, elfogadasi_ido, elfogadva)
    VALUES (?, ?, NOW(), NOW(), 1)
  `;

  db.query(query, [user_id, sportklub_id], (err, result) => {
    if (err) {
      console.error('Hiba a jelentkezÃ©s hozzÃ¡adÃ¡sakor:', err);
      return res.status(500).json({ message: 'Hiba tÃ¶rtÃ©nt a jelentkezÃ©s sorÃ¡n.' });
    }
    res.json({ message: 'Sikeres jelentkezÃ©s!' });
  });
});

//------------------------------------------------------------------------------

//edzÃ©snaplÃ³ hozzÃ¡adott edzÃ©sek
app.get("/klubbok/all/:userId", (req, res) => {
  const { userId } = req.params;
 
  db.query("SELECT * FROM klubbok WHERE user_id = ?", [userId], (error, results) => {
      if (error) {
          console.error("Hiba az edzÃ©sek lekÃ©rdezÃ©sekor:", error);
          return res.status(500).json({ message: "Hiba tÃ¶rtÃ©nt az edzÃ©sek lekÃ©rdezÃ©sekor." });
      }
      res.json(results);
  });
});
//---------------------------------------------------------------------------------------

app.get('/applied-workouts/:userId', (req, res) => {
  const userId = req.params.userId;
  db.query(`
    SELECT k.sport_id 
    FROM applied_workouts a 
    JOIN sportklubbok k ON a.sportklub_id = k.sprotklub_id 
    WHERE a.user_id = ?
  `, [userId], (err, result) => {
    if (err) {
      res.status(500).json({ message: "Hiba a lekÃ©rdezÃ©s sorÃ¡n" });
    } else {
      res.json(result); // [{ sport_id: 1 }, { sport_id: 2 }, ...]
    }
  });
});

//-------------------------------------------------------------------------------------------------------

// Ã–sszes edzÃ©s lekÃ©rdezÃ©se sport_id alapjÃ¡n (minden edzÅ‘tÅ‘l)
app.get("/klubbok/sport/:sportId", (req, res) => {
  const sportId = req.params.sportId;
  const query = "SELECT * FROM klubbok WHERE sport_id = ?";

  db.query(query, [sportId], (err, results) => {
    if (err) {
      console.error("Hiba az edzÃ©sek lekÃ©rdezÃ©sekor:", err);
      return res.status(500).json({ message: "Hiba tÃ¶rtÃ©nt az edzÃ©sek lekÃ©rdezÃ©sekor." });
    }
    res.json(results);
  });
});


// **Szerver indÃ­tÃ¡sa**
const PORT = 5000;
app.listen(PORT, () => {
  console.log(`ðŸš€ Szerver fut az ${PORT}-es porton`);
});