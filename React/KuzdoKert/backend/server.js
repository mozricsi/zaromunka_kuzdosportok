const express = require("express");
const mysql = require("mysql2");
const cors = require("cors");
const bcrypt = require("bcrypt");
const saltRounds = 10;
require("dotenv").config();

const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const { Server } = require('socket.io');

const app = express();

app.use(express.json());
app.use(cors({
  origin: ["http://localhost:5173"],
  methods: ["GET", "POST"],
  credentials: true
}));

app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: true }));

app.use(session({
  key: "userId",
  secret: "secret",
  resave: false,
  saveUninitialized: false,
  cookie: {
    expires: 1000000
  },
}));

// **MySQL adatb√°zis kapcsolat**
const db = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "",
  port: "3306",
  database: "kuzdosportok",
});

db.connect((err) => {
  if (err) {
    console.error("üî¥ MySQL hiba:", err);
  } else {
    console.log("‚úÖ MySQL kapcsol√≥dva!");
  }
});

// Regisztr√°ci√≥
app.post('/register', (req, res) => {
  const vnev = req.body.vnev;
  const knev = req.body.knev;
  const knev2 = req.body.knev2;
  const email = req.body.email;
  const szul = req.body.szul;
  const lakhely = req.body.lakhely;
  const tel = req.body.tel;
  const felhasznalonev = req.body.username;
  const jelszo = req.body.password;
  const role = req.body.role || "visitor";

  bcrypt.hash(jelszo, saltRounds, (err, hash) => {
    if (err) {
      console.log(err);
      return res.status(500).send("Hiba a jelsz√≥ hash-el√©se k√∂zben.");
    }

    db.query(
      "INSERT INTO latogatok (vnev, knev, knev2, lakhelyvaros, email, telefonszam, szul_ido, felhasznalonev, jelszo, role, regisztracio_datum) VALUES (?,?,?,?,?,?,?,?,?,?, NOW())",
      [vnev, knev, knev2, lakhely, email, tel, szul, felhasznalonev, hash, role],
      (err, result) => {
        if (err) {
          console.log("Hib√°k:" + err);
          return res.status(500).send("Hiba a regisztr√°ci√≥ sor√°n.");
        }
        console.log("Az insert (regisztr√°ci√≥) sikeresen lefutott.");
        res.send({ message: "Sikeres regisztr√°ci√≥!" });
      }
    );
  });
});

// Felhaszn√°l√≥n√©v ellen≈ërz√©s
app.post("/checkUsername", (req, res) => {
  const felhasznalonev = req.body.username;

  db.query(
    "SELECT felhasznalonev FROM kuzdosportok.latogatok WHERE felhasznalonev = ?",
    [felhasznalonev],
    (err, result) => {
      if (err) {
        res.status(500).send({ error: "Database error" });
      } else {
        console.log("SQL result:", result);
        res.send({ exists: result.length > 0 });
      }
    }
  );
});

// Bejelentkez√©s ellen≈ërz√©s
app.get("/login", (req, res) => {
  if (req.session.user) {
    res.send({ loggedIn: true, user: req.session.user });
  } else {
    res.send({ loggedIn: false, user: null });
  }
});

// Bejelentkez√©s
app.post('/login', (req, res) => {
  const felhasznalonev = req.body.username;
  const jelszo = req.body.password;

  db.query(
    "SELECT * FROM latogatok WHERE felhasznalonev = ?",
    [felhasznalonev],
    (err, result) => {
      if (err) {
        res.send({ err: err });
      }

      if (result.length > 0) {
        bcrypt.compare(jelszo, result[0].jelszo, (error, response) => {
          if (response) {
            req.session.user = result;
            console.log(req.session.user);
            res.send(result);

            db.query(
              "INSERT INTO latogatobejelentkezesek (user_id, bejelentkezes_ido) VALUES (?, NOW())",
              [req.session.user[0].user_id],
              (err) => {
                if (err) {
                  console.log("Hib√°k:" + err);
                  return res.status(500).send("Hiba a besz√∫r√°s sor√°n");
                }
                console.log("Az insert sikeresen lefutott.");
              }
            );
          } else {
            res.send({ message: "Rossz felhaszn√°l√≥/jelsz√≥ kombin√°ci√≥!" });
          }
        });
      } else {
        res.send({ message: "Nem l√©tez≈ë felhaszn√°l√≥!" });
      }
    }
  );
});

// Kijelentkez√©s
app.post("/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error("Hiba a kijelentkez√©s sor√°n:", err);
      return res.status(500).json({ error: "Nem siker√ºlt kijelentkezni" });
    }

    res.clearCookie("userId");
    res.json({ loggedIn: false, user: null, message: "Sikeres kijelentkez√©s!" });
  });
});

// Felhaszn√°l√≥i adatok friss√≠t√©se
app.post("/updateUser", (req, res) => {
  const { vnev, knev, knev2, email, szul, lakhely, tel, username, password } = req.body;

  const sql = `
    UPDATE latogatok 
    SET vnev = ?, knev = ?, knev2 = ?, email = ?, szul_ido = ?, lakhelyvaros = ?, telefonszam = ?, jelszo = ?
    WHERE felhasznalonev = ?;
  `;

  db.query(sql, [vnev, knev, knev2, email, szul, lakhely, tel, password, username], (err, result) => {
    if (err) {
      console.error("Hiba az adatb√°zis friss√≠t√©sekor:", err);
      return res.status(500).send("Hiba t√∂rt√©nt az adatok friss√≠t√©se k√∂zben.");
    }

    console.log("‚úÖ Profil sikeresen friss√≠tve!");

    res.clearCookie("userId");
    res.cookie("userId", username, {
      maxAge: 1000000
    });
    req.session.user = [{
      vnev, knev, knev2, email, szul_ido: szul, lakhelyvaros: lakhely, telefonszam: tel, felhasznalonev: username, jelszo: password
    }];

    res.send({ message: "Profil sikeresen friss√≠tve!", user: req.session.user });
  });
});

// Jelsz√≥v√°ltoztat√°s
app.post("/changePassword", (req, res) => {
  const { username, oldPassword, newPassword } = req.body;

  if (newPassword.length < 6) {
    return res.status(400).json({ message: "Az √∫j jelsz√≥nak legal√°bb 6 karakter hossz√∫nak kell lennie!" });
  }

  const query = "SELECT jelszo FROM latogatok WHERE felhasznalonev = ?";
  db.query(query, [username], (err, result) => {
    if (err) {
      return res.status(500).json({ message: "Hiba t√∂rt√©nt az adatb√°zisban." });
    }
    if (result.length === 0) {
      return res.status(404).json({ message: "Felhaszn√°l√≥ nem tal√°lhat√≥." });
    }

    const hashedPassword = result[0].jelszo;

    bcrypt.compare(oldPassword, hashedPassword, (err, match) => {
      if (err) {
        return res.status(500).json({ message: "Hiba t√∂rt√©nt az ellen≈ërz√©s sor√°n." });
      }
      if (!match) {
        return res.status(400).json({ message: "A r√©gi jelsz√≥ helytelen!" });
      }

      bcrypt.compare(newPassword, hashedPassword, (err, same) => {
        if (err) {
          return res.status(500).json({ message: "Hiba t√∂rt√©nt az ellen≈ërz√©s sor√°n." });
        }
        if (same) {
          return res.status(400).json({ message: "Az √∫j jelsz√≥ nem lehet ugyanaz, mint a r√©gi!" });
        }

        bcrypt.hash(newPassword, 10, (err, newHashedPassword) => {
          if (err) {
            return res.status(500).json({ message: "Hiba t√∂rt√©nt a jelsz√≥ hash-el√©sekor." });
          }

          const updateQuery = "UPDATE latogatok SET jelszo = ? WHERE felhasznalonev = ?";
          db.query(updateQuery, [newHashedPassword, username], (err, result) => {
            if (err) {
              return res.status(500).json({ message: "Hiba t√∂rt√©nt a jelsz√≥ friss√≠t√©sekor." });
            }
            res.json({ message: "Jelsz√≥ sikeresen megv√°ltoztatva!" });
          });
        });
      });
    });
  });
});

// Sportok lek√©r√©se
app.get("/sports/:id", (req, res) => {
  const sportId = req.params.id;

  const sql = "SELECT sport_id, sportnev, leiras, szabalyok FROM kuzdosportok.sport WHERE sport_id = ?";

  db.query(sql, [sportId], (err, results) => {
    if (err) {
      console.error("Hiba az adatlek√©rdez√©s sor√°n:", err);
      return res.status(500).json({ error: "Adatb√°zis hiba" });
    }

    if (results.length > 0) {
      res.json(results[0]);
    } else {
      res.status(404).json({ error: "Nincs ilyen sport" });
    }
  });
});

// Klubok lek√©r√©se sport ID alapj√°n
app.get("/klubbok/:sportId", (req, res) => {
  const sportId = req.params.sportId;
  const query = `SELECT * FROM klubbok WHERE sport_id = ?`;

  db.query(query, [sportId], (err, results) => {
    if (err) {
      console.error("Hiba t√∂rt√©nt:", err);
      res.status(500).json({ error: "Adatb√°zis hiba" });
    } else {
      res.json(results);
    }
  });
});

// Edz√©s hozz√°ad√°sa az edz≈ë √°ltal (klub)
app.post("/coach/add-club", (req, res) => {
  const { user_id, sport_id, hely, szabalyok, leiras, vnev, knev, klubbnev } = req.body;

  console.log("K√ºld√∂tt adatok:", { user_id, sport_id, hely, szabalyok, leiras, vnev, knev, klubbnev });

  if (!user_id || !sport_id || !hely) {
    return res.status(400).json({ error: "Minden k√∂telez≈ë mez≈ët ki kell t√∂lteni!" });
  }

  if (isNaN(user_id) || isNaN(sport_id)) {
    return res.status(400).json({ error: "A user_id √©s sport_id sz√°mnak kell lennie!" });
  }

  db.query("SELECT user_id FROM latogatok WHERE user_id = ?", [user_id], (err, userResult) => {
    if (err) {
      console.error("Hiba a felhaszn√°l√≥ ellen≈ërz√©sekor:", err.message);
      return res.status(500).json({ error: "Adatb√°zis hiba", details: err.message });
    }
    if (userResult.length === 0) {
      return res.status(400).json({ error: "A felhaszn√°l√≥ nem l√©tezik!" });
    }

    db.query("SELECT sport_id FROM sport WHERE sport_id = ?", [sport_id], (err, sportResult) => {
      if (err) {
        console.error("Hiba a sport ellen≈ërz√©sekor:", err.message);
        return res.status(500).json({ error: "Adatb√°zis hiba", details: err.message });
      }
      if (sportResult.length === 0) {
        return res.status(400).json({ error: "A sport nem l√©tezik!" });
      }

      const sql = `
        INSERT INTO klubbok (sport_id, user_id, vnev, knev, klubbnev, hely, leiras, szabalyok)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `;

      db.query(sql, [sport_id, user_id, vnev, knev, klubbnev, hely, leiras, szabalyok], (err, result) => {
        if (err) {
          console.error("Hiba az edz√©s hozz√°ad√°sakor:", err.message);
          if (err.code === 'ER_DUP_ENTRY') {
            return res.status(500).json({ error: "Duplik√°lt bejegyz√©s", details: err.message });
          }
          return res.status(500).json({ error: "Adatb√°zis hiba", details: err.message });
        }

        db.query(
          "SELECT * FROM klubbok WHERE sprotklub_id = LAST_INSERT_ID()",
          (err, newWorkout) => {
            if (err) {
              console.error("Hiba az √∫j edz√©s lek√©rdez√©sekor:", err.message);
              return res.status(500).json({ error: "Adatb√°zis hiba", details: err.message });
            }
            res.json({ message: "Edz√©s sikeresen hozz√°adva!", workout: newWorkout[0] });
          }
        );
      });
    });
  });
});

// √ârt√©kel√©sek lek√©rdez√©se
app.get('/ertekelesek/:sportklub_id', (req, res) => {
  const sportklub_id = req.params.sportklub_id;
  const query = `
    SELECT e.*, l.felhasznalonev 
    FROM ertekelesek e 
    JOIN latogatok l ON e.user_id = l.user_id 
    WHERE e.sportklub_id = ?
  `;
  
  db.query(query, [sportklub_id], (err, results) => {
    if (err) {
      console.error('Hiba az √©rt√©kel√©sek lek√©rdez√©sekor:', err);
      return res.status(500).json({ message: 'Hiba t√∂rt√©nt az √©rt√©kel√©sek lek√©rdez√©sekor.' });
    }
    res.json(results);
  });
});

// √öj √©rt√©kel√©s hozz√°ad√°sa
app.post('/ertekelesek', (req, res) => {
  const { user_id, sportklub_id, szoveges_ertekeles, csillagos_ertekeles } = req.body;

  const checkUserQuery = `SELECT role FROM latogatok WHERE user_id = ?`;
  db.query(checkUserQuery, [user_id], (err, results) => {
    if (err) {
      console.error('Hiba a felhaszn√°l√≥ ellen≈ërz√©sekor:', err);
      return res.status(500).json({ message: 'Hiba t√∂rt√©nt a felhaszn√°l√≥ ellen≈ërz√©sekor.' });
    }

    if (results.length === 0) {
      return res.status(404).json({ message: 'Felhaszn√°l√≥ nem tal√°lhat√≥.' });
    }

    const userRole = results[0].role;
    if (userRole !== 'visitor') {
      return res.status(403).json({ message: 'Csak l√°togat√≥k adhatnak √©rt√©kel√©st!' });
    }

    const insertQuery = `
      INSERT INTO ertekelesek (user_id, sportklub_id, szoveges_ertekeles, csillagos_ertekeles)
      VALUES (?, ?, ?, ?)
    `;
    db.query(insertQuery, [user_id, sportklub_id, szoveges_ertekeles, csillagos_ertekeles], (err, result) => {
      if (err) {
        console.error('Hiba az √©rt√©kel√©s hozz√°ad√°sakor:', err);
        return res.status(500).json({ message: 'Hiba t√∂rt√©nt az √©rt√©kel√©s hozz√°ad√°sa sor√°n.' });
      }
      res.json({ message: '√ârt√©kel√©s sikeresen hozz√°adva!' });
    });
  });
});

// Jelentkez√©s hozz√°ad√°sa
app.post('/apply-workout', (req, res) => {
  const { user_id, sportklub_id } = req.body;

  const query = `
    INSERT INTO jelentkezes (user_id, sportklub_id, jelentkezes_ido, elfogadasi_ido, elfogadva)
    VALUES (?, ?, NOW(), NOW(), 1)
  `;

  db.query(query, [user_id, sportklub_id], (err, result) => {
    if (err) {
      console.error('Hiba a jelentkez√©s hozz√°ad√°sakor:', err);
      return res.status(500).json({ message: 'Hiba t√∂rt√©nt a jelentkez√©s sor√°n.' });
    }
    res.json({ message: 'Sikeres jelentkez√©s!' });
  });
});

// √ârtes√≠t√©sek lek√©rdez√©se a l√°togat√≥ sz√°m√°ra
app.get('/notifications/:user_id', (req, res) => {
  const user_id = req.params.user_id;

  const query = `
    SELECT 
      j.jelentkezes_id,
      k.klubbnev,
      k.hely,
      e.nap,
      e.ido,
      l.vnev AS coach_vnev,
      l.knev AS coach_knev
    FROM jelentkezes j
    JOIN klubbok k ON j.sportklub_id = k.sprotklub_id
    JOIN latogatok l ON k.user_id = l.user_id
    JOIN klub_edzesek e ON k.sprotklub_id = e.sportklub_id
    WHERE j.user_id = ?
      AND e.nap = DAYNAME(CURDATE())
      AND j.elfogadva = 1
  `;

  db.query(query, [user_id], (err, results) => {
    if (err) {
      console.error('Hiba az √©rtes√≠t√©sek lek√©rdez√©sekor:', err);
      return res.status(500).json({ message: 'Hiba t√∂rt√©nt az √©rtes√≠t√©sek lek√©rdez√©sekor.' });
    }
    res.json(results);
  });
});

// Edz≈ëk √©rtes√≠t√©sei a jelentkez√©sekr≈ël
app.get('/coach-notifications/:user_id', (req, res) => {
  const user_id = req.params.user_id;

  const query = `
    SELECT 
      j.jelentkezes_id,
      l.felhasznalonev AS visitor_username,
      k.klubbnev,
      k.hely,
      e.nap,
      e.ido,
      j.jelentkezes_ido
    FROM jelentkezes j
    JOIN latogatok l ON j.user_id = l.user_id
    JOIN klubbok k ON j.sportklub_id = k.sprotklub_id
    JOIN klub_edzesek e ON k.sprotklub_id = e.sportklub_id
    WHERE k.user_id = ?
      AND j.elfogadva = 1
    ORDER BY j.jelentkezes_ido DESC
    LIMIT 10
  `;

  db.query(query, [user_id], (err, results) => {
    if (err) {
      console.error('Hiba az edz≈ëi √©rtes√≠t√©sek lek√©rdez√©sekor:', err);
      return res.status(500).json({ message: 'Hiba t√∂rt√©nt az √©rtes√≠t√©sek lek√©rdez√©sekor.' });
    }
    res.json(results);
  });
});

// Edz√©snapl√≥ - edz≈ë √°ltal hozz√°adott edz√©sek lek√©rdez√©se
app.get("/klubbok/all/:userId", (req, res) => {
  const { userId } = req.params;

  db.query("SELECT * FROM klubbok WHERE user_id = ?", [userId], (error, results) => {
    if (error) {
      console.error("Hiba az edz√©sek lek√©rdez√©sekor:", error);
      return res.status(500).json({ message: "Hiba t√∂rt√©nt az edz√©sek lek√©rdez√©sekor." });
    }
    res.json(results);
  });
});

// √ñsszes edz√©s lek√©rdez√©se sport_id alapj√°n
app.get("/klubbok/sport/:sportId", (req, res) => {
  const sportId = req.params.sportId;
  const query = "SELECT * FROM klubbok WHERE sport_id = ?";

  db.query(query, [sportId], (err, results) => {
    if (err) {
      console.error("Hiba az edz√©sek lek√©rdez√©sekor:", err);
      return res.status(500).json({ message: "Hiba t√∂rt√©nt az edz√©sek lek√©rdez√©sekor." });
    }
    res.json(results);
  });
});

// Edz√©s hozz√°ad√°sa
app.post("/coach/add-workout", async (req, res) => {
  try {
    const { pontosCim, nap, ido, sportklub_id } = req.body;
    console.log({ pontosCim, nap, ido, sportklub_id });

    if (!pontosCim || !nap || !ido || !sportklub_id) {
      return res.status(400).json({ message: "Minden mez≈ë kit√∂lt√©se k√∂telez≈ë!" });
    }

    const query = `
      INSERT INTO klub_edzesek (sportklub_id, pontosCim, nap, ido)
      VALUES (?, ?, ?, ?)
    `;
    db.query(query, [sportklub_id, pontosCim, nap, ido]);

    res.status(201).json({ message: "Edz√©s sikeresen hozz√°adva!" });
  } catch (error) {
    console.error("Hiba az edz√©s hozz√°ad√°sakor:", error);
    res.status(500).json({ message: "Szerverhiba az edz√©s hozz√°ad√°sa sor√°n." });
  }
});

// Klub √©s edz√©s lek√©rdez√©se
app.get('/api/klub/:id', (req, res) => {
  const klubId = req.params.id;

  const klubQuery = `
    SELECT * FROM klubbok WHERE sprotklub_id = ?;
  `;
  db.query(klubQuery, [klubId], (err, klubResult) => {
    if (err) {
      return res.status(500).json({ error: 'Hiba t√∂rt√©nt a klub adatainak lek√©r√©sekor.' });
    }

    const edzesQuery = `
      SELECT * FROM klub_edzesek WHERE sportklub_id = ?;
    `;
    db.query(edzesQuery, [klubId], (err, edzesResult) => {
      if (err) {
        return res.status(500).json({ error: 'Hiba t√∂rt√©nt az edz√©sek lek√©rdez√©sekor.' });
      }

      res.json({ klub: klubResult[0], edzesek: edzesResult });
    });
  });
});

// Ranglista lek√©rdez√©se
app.get('/api/ranglista', (req, res) => {
  db.query('SELECT felhasznalonev, COUNT(*) as edzesek FROM klub_edzesek JOIN latogatok ON klub_edzesek.sportklub_id = latogatok.user_id GROUP BY user_id ORDER BY edzesek DESC', (err, results) => {
    if (err) return res.status(500).send('Error');
    res.json(results);
  });
});

// Esem√©nyek lek√©rdez√©se
app.get('/api/esemenyek', (req, res) => {
  const query = `
    SELECT e.*, s.sportnev 
    FROM esemenyek e 
    JOIN sport s ON e.sport_id = s.sport_id
  `;
  db.query(query, (err, results) => {
    if (err) {
      console.error('Hiba az esem√©nyek lek√©rdez√©sekor:', err);
      return res.status(500).json({ message: 'Hiba t√∂rt√©nt az esem√©nyek lek√©rdez√©sekor.' });
    }
    res.json(results);
  });
});

// Edz√©sstatisztik√°k lek√©rdez√©se a Dashboardhoz
app.get('/api/edzesek/stat', (req, res) => {
  const query = `
    SELECT DAYNAME(nap) as day, COUNT(*) as count 
    FROM klub_edzesek 
    WHERE nap IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
    GROUP BY DAYNAME(nap)
    ORDER BY FIELD(DAYNAME(nap), 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
  `;
  db.query(query, (err, results) => {
    if (err) {
      console.error('Hiba a statisztik√°k lek√©rdez√©sekor:', err);
      return res.status(500).json({ message: 'Hiba t√∂rt√©nt a statisztik√°k lek√©rdez√©sekor.' });
    }
    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
    const stats = days.map(day => {
      const found = results.find(r => r.day === day);
      return { day, count: found ? found.count : 0 };
    });
    res.json(stats);
  });
});

// √úzenetek lek√©rdez√©se
app.get('/api/uzenetek', (req, res) => {
  const query = `
    SELECT u.uzenet_id, u.user_id, u.felhasznalonev, u.uzenet, u.ido
    FROM uzenetek u
    ORDER BY u.ido DESC
    LIMIT 50
  `;
  db.query(query, (err, results) => {
    if (err) {
      console.error('Hiba az √ºzenetek lek√©rdez√©sekor:', err);
      return res.status(500).json({ message: 'Hiba t√∂rt√©nt az √ºzenetek lek√©rdez√©sekor.' });
    }
    res.json(results);
  });
});

// √úzenet k√ºld√©se
app.post('/api/uzenetek', (req, res) => {
  const { user_id, felhasznalonev, uzenet } = req.body;

  if (!user_id || !felhasznalonev || !uzenet) {
    return res.status(400).json({ message: 'Minden mez≈ë kit√∂lt√©se k√∂telez≈ë!' });
  }

  const query = `
    INSERT INTO uzenetek (user_id, felhasznalonev, uzenet, ido)
    VALUES (?, ?, ?, NOW())
  `;
  db.query(query, [user_id, felhasznalonev, uzenet], (err, result) => {
    if (err) {
      console.error('Hiba az √ºzenet ment√©sekor:', err);
      return res.status(500).json({ message: 'Hiba t√∂rt√©nt az √ºzenet ment√©sekor.' });
    }

    const newMessage = {
      uzenet_id: result.insertId,
      user_id,
      felhasznalonev,
      uzenet,
      ido: new Date(),
    };
    io.emit('message', newMessage); // Socket.IO-n kereszt√ºl √©rtes√≠tj√ºk a klienseket
    res.json(newMessage);
  });
});

// Chat Socket.IO integr√°ci√≥
const io = new Server(5001, { cors: { origin: "http://localhost:5173" } });

io.on('connection', (socket) => {
  console.log('√öj felhaszn√°l√≥ csatlakozott:', socket.id);

  socket.on('message', ({ user_id, message }) => {
    console.log(`√úzenet ${user_id}-t√≥l: ${message}`);
    io.emit('message', { user_id, message, timestamp: new Date() });
  });

  socket.on('disconnect', () => {
    console.log('Felhaszn√°l√≥ lecsatlakozott:', socket.id);
  });
});

// **Szerver ind√≠t√°sa**
const PORT = 5000;
app.listen(PORT, () => {
  console.log(`üöÄ Szerver fut az ${PORT}-es porton`);
});